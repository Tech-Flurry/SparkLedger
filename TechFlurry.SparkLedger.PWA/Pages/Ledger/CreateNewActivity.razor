@page "/CreateNewActivity"
@inject IJSRuntime JSRuntime
@inject IMenuService MenuService
@inject IActivityService ActivityService
@inject NavigationManager NavigationManager
<div class="row">
    <div class="col-lg-12">
        <div class="card card-custom gutter-b example example-compact">
            <div class="card-header">
                <h3 class="card-title">
                    New Activity
                </h3>
            </div>
            <form class="form" @ref="form">
                <div class="card-body">
                    <div class="form-group @(IsAccountIdValid()?"has-success":"has-danger")">
                        <label>Account:</label>
                        <select @bind="accountId" class="form-control form-control-solid @(IsAccountIdValid()?"is-valid":"is-invalid")">
                            <option value="">Select an Account</option>
                            @foreach (var item in ActivityService.GetLedgerAccounts())
                            {
                                <option value="@item.Value">@item.Text</option>
                            }
                        </select>
                        <span class="form-text text-muted">Please select the transaction item</span>
                        <div class="fv-plugins-message-container">
                            <div class="fv-help-block">@(!IsAccountIdValid() ? "Account title is required" : "")</div>
                        </div>
                    </div>
                    <div class="form-group @(IsTransItemValid()?"has-success":"has-danger")">
                        <label>Transaction Item:</label>
                        <select @bind="transactionItem" class="form-control form-control-solid @(IsTransItemValid()?"is-valid":"is-invalid")">
                            <option value="">Select an Item</option>
                            @foreach (var item in ActivityService.GetTransactionItems())
                            {
                                <option value="@item.Value">@item.Text</option>
                            }
                        </select>
                        <span class="form-text text-muted">Account code will be generated by the server</span>
                        <div class="fv-plugins-message-container">
                            <div class="fv-help-block">@(!IsTransItemValid() ? "Transaction item is required" : "")</div>
                        </div>
                    </div>
                    <div class="form-group @(IsTransTypeValid()?"has-success":"has-danger")">
                        <label>Transaction Type:</label>
                        <div class="radio-inline">
                            <select @bind="transactionType" class="form-control form-control-solid">
                                @foreach (var item in Enum.GetNames(typeof(TransactionType)))
                                {
                                    <option>@item</option>
                                }
                            </select>
                        </div>
                        <span class="form-text text-muted">Please choose a transaction type</span>
                        <div class="fv-plugins-message-container">
                            <div class="fv-help-block">@(!IsTransTypeValid() ? "Transaction type is required" : "")</div>
                        </div>
                    </div>
                    <div class="form-group @(IsValueValid()?"has-success":"has-danger")">
                        <label>Transaction Value:</label>
                        <input @bind-value="transValue" class="form-control form-control-solid no-arrows @(IsValueValid()?"is-valid":"is-invalid")" placeholder="Enter account title" type="number" min="0">
                        <span class="form-text text-muted">Please enter the value</span>
                        <div class="fv-plugins-message-container">
                            <div class="fv-help-block">@(!IsValueValid() ? "A non-negtive value is required" : "")</div>
                        </div>
                    </div>
                    <div class="form-group @(IsDescriptionValid()?"has-success":"has-danger")">
                        <label>Description:</label>
                        <input @bind-value="transDescription" class="form-control form-control-solid no-arrows @(IsDescriptionValid()?"is-valid":"is-invalid")" placeholder="Enter transaction description" type="text">
                        <span class="form-text text-muted">Please enter the value</span>
                        <div class="fv-plugins-message-container">
                            <div class="fv-help-block">@(!IsDescriptionValid() ? "A non-negtive value is required" : "")</div>
                        </div>
                    </div>
                </div>
                <div class="card-footer">
                    @{
                        var isValid = GetFormValidation();
                    }
                    <button type="button" class="btn btn-primary mr-2 @(isValid ? "" : "disabled")" @onclick="Submit">Add</button>
                    <button type="button" class="btn btn-secondary" @onclick="Reset">Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>
@code {
    long? accountId, transactionItem;
    TransactionType transactionType = TransactionType.In;
    decimal transValue = 0;
    string transDescription;
    ElementReference form;
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        MenuService.ChangeActiveTab(1);
        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("disableFormSubmit", form);
            ActivityService.OnValueUpdate += OnValueChange;
            ActivityService.OnSuccessAddNew += OnSuccessfulSubmit;
            ActivityService.OnErrorAddNew += OnErrorSubmit;
        }
        return base.OnAfterRenderAsync(firstRender);
    }
}

@functions{
    bool GetFormValidation()
    {
        return IsAccountIdValid() && IsTransItemValid() && IsTransTypeValid() && IsValueValid() && IsDescriptionValid();
    }
    bool IsAccountIdValid()
    {
        return accountId != null;
    }
    bool IsTransItemValid()
    {
        return transactionItem != null;
    }
    bool IsTransTypeValid()
    {
        return transactionType != null;
    }
    bool IsValueValid()
    {
        return transValue > 0;
    }
    bool IsDescriptionValid()
    {
        return !string.IsNullOrEmpty(transDescription) || !string.IsNullOrWhiteSpace(transDescription);
    }
    void Reset()
    {
        accountId = null;
        transactionItem = null;
        transactionType = TransactionType.In;
        transValue = 0;
    }
    void OnSuccessfulSubmit(object sender, SuccessfullOperationEventArgs eventArgs)
    {
        JSRuntime.InvokeVoidAsync("showSuccessMessage", "", eventArgs.Message);
        Reset();
        ActivityService.LoadMainActivity(DateTime.Today, DateTime.Today.AddDays(1).AddSeconds(-1));
        NavigationManager.NavigateTo("/");
    }
    void OnErrorSubmit(object sender, ErrorOperationEventArgs eventArgs)
    {
        JSRuntime.InvokeVoidAsync("showErrorMessage", "", eventArgs.Message);
    }
    void Submit()
    {
        ActivityService.AddNewActivity(accountId ?? 0, transactionItem ?? 0, transactionType, transValue);
    }
    void UpdateUI()
    {
        StateHasChanged();
    }
    void OnValueChange(object sender, OnUpdateEventArgs eventArgs)
    {
        UpdateUI();
    }
}
