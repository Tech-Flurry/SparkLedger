@page "/TransactionItems"
@inject ILedgerItemService LedgerItemService
@inject IJSRuntime JSRuntime
@inject IMenuService MenuService
<div class="row">
    <div class="col-lg-12">
        <div class="card card-custom gutter-b example example-compact">
            <div class="card-header">
                <h3 class="card-title">
                    New Ledger Item
                </h3>
            </div>
            <form class="form" @ref="form">
                <div class="card-body">
                    <div class="form-group @(nameReqFlag?"has-danger":"")">
                        <label>Item Name:</label>
                        <input @bind-value="itemName" class="form-control form-control-solid @(nameReqFlag?"is-invalid":"")" placeholder="Enter item name">
                        <span class="form-text text-muted">Please enter a new item name</span>
                        <div class="fv-plugins-message-container">
                            <div class="fv-help-block">@(nameReqFlag? "Item name is required":"")</div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label>Category:</label>
                        <select @bind="category" class="form-control form-control-solid">
                            @foreach (var item in Enum.GetNames(typeof(LedgerCategories)))
                            {
                                <option>@item</option>
                            }
                        </select>
                        <span class="form-text text-muted">Please Select a Category</span>
                    </div>
                </div>
                <div class="card-footer">
                    <button type="button" class="btn btn-primary mr-2" @onclick="Submit">Add</button>
                    <button type="reset" class="btn btn-secondary">Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>

@code {
    string itemName;
    LedgerCategories category = LedgerCategories.Currency;
    bool nameReqFlag = false;
    ElementReference form;
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        MenuService.ChangeActiveTab(2);
        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("disableFormSubmit", form);
            LedgerItemService.OnItemAdded += OnSuccessfulSubmit;
            LedgerItemService.OnItemAddError += OnErrorSubmit;
        }
        return base.OnAfterRenderAsync(firstRender);
    }
}

@functions {
    void Submit()
    {
        if (string.IsNullOrEmpty(itemName) || string.IsNullOrWhiteSpace(itemName))
        {
            nameReqFlag = true;
        }
        else
        {
            LedgerItemService.AddNewItem(new LedgerItemModel
            {
                Category = category,
                ItemName = itemName
            });
        }
    }
    void OnSuccessfulSubmit(object sender, SuccessfullOperationEventArgs eventArgs)
    {
        JSRuntime.InvokeVoidAsync("showSuccessMessage", itemName, eventArgs.Message);
        itemName = string.Empty;
        category = LedgerCategories.Currency;
    }
    void OnErrorSubmit(object sender, ErrorOperationEventArgs eventArgs)
    {
        JSRuntime.InvokeVoidAsync("showErrorMessage", itemName, eventArgs.Message);
    }
}
