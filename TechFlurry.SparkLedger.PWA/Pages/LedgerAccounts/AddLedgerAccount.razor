@page "/LedgerAccounts"
@inject IJSRuntime JSRuntime
@inject IMenuService MenuService
@inject ILedgerAccountsService LedgerAccountService
<div class="row">
    <div class="col-lg-12">
        <div class="card card-custom gutter-b example example-compact">
            <div class="card-header">
                <h3 class="card-title">
                    New Account
                </h3>
            </div>
            <form class="form" @ref="form">
                <div class="card-body">
                    <div class="form-group">
                        <label>Account Code:</label>
                        <input @bind-value="LedgerAccountService.NewAccountCode" class="form-control form-control-solid" placeholder="Account unique code" readonly="readonly">
                        <span class="form-text text-muted">Account code will be generated by the server</span>
                    </div>
                    <div class="form-group @((string.IsNullOrEmpty(accountTitle)||string.IsNullOrWhiteSpace(accountTitle))?"has-danger":"has-success")">
                        <label>Account Title:</label>
                        <input @bind-value="accountTitle" class="form-control form-control-solid @((string.IsNullOrEmpty(accountTitle)||string.IsNullOrWhiteSpace(accountTitle))?"is-invalid":"is-valid")" placeholder="Enter account title">
                        <span class="form-text text-muted">Please enter a new item title</span>
                        <div class="fv-plugins-message-container">
                            <div class="fv-help-block">@((string.IsNullOrEmpty(accountTitle) || string.IsNullOrWhiteSpace(accountTitle)) ? "Account title is required":"")</div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label>Category:</label>
                        <select @bind="category" class="form-control form-control-solid">
                            @foreach (var item in Enum.GetNames(typeof(LedgerCategories)))
                            {
                                <option>@item</option>
                            }
                        </select>
                        <span class="form-text text-muted">Please Select a Category</span>
                    </div>
                    <div class="row">
                        <div class="col-4">
                            <div class="form-group">
                                <div class="checkbox-list">
                                    <label class="checkbox">
                                        <input @bind-value="isOnApp" type="checkbox" />
                                        <span></span>
                                        On @Application.GetInformation().AppName
                                    </label>
                                </div>
                            </div>
                        </div>
                        <div class="col-8">
                            <div class="form-group @(((string.IsNullOrEmpty(phoneNumber)||string.IsNullOrWhiteSpace(phoneNumber))&&isOnApp)?"has-danger":"has-success")">
                                <label>Account Holder's Phone:</label>
                                @if (isOnApp)
                                {
                                    <input @bind-value="phoneNumber" class="form-control form-control-solid @(((string.IsNullOrEmpty(phoneNumber)||string.IsNullOrWhiteSpace(phoneNumber))&&isOnApp)?"is-invalid":"is-valid")" placeholder="Enter account title">
                                }
                                else
                                {
                                    phoneNumber = "";
                                    <input @bind-value="phoneNumber" class="form-control form-control-solid @(((string.IsNullOrEmpty(phoneNumber)||string.IsNullOrWhiteSpace(phoneNumber))&&isOnApp)?"is-invalid":"")" placeholder="Enter account title" disabled="disabled">
                                }
                                <span class="form-text text-muted">Please enter account holder's phone number</span>
                                <div class="fv-plugins-message-container">
                                    <div class="fv-help-block">@(((string.IsNullOrEmpty(phoneNumber) || string.IsNullOrWhiteSpace(phoneNumber)) && isOnApp) ? "Account holder's phone number is required":"")</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-footer">
                    @{
                        var isValid = GetFormValidation();
                    }
                    <button type="button" class="btn btn-primary mr-2 @(isValid?"":"disabled")" @onclick="Submit">Add</button>
                    <button type="button" class="btn btn-secondary" @onclick="Reset">Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>

@code {
    string accountTitle, accountCode, phoneNumber;
    bool isOnApp;
    LedgerCategories category = LedgerCategories.Currency;
    ElementReference form;
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        MenuService.ChangeActiveTab(3);
        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("disableFormSubmit", form);
            LedgerAccountService.OnValueUpdate += OnValueChange;
            LedgerAccountService.OnAccountSuccessfullyAdded += OnSuccessfulSubmit;
            LedgerAccountService.OnErrorAdding += OnErrorSubmit;
            LedgerAccountService.LoadNewCode();
        }
        return base.OnAfterRenderAsync(firstRender);
    }
}

@functions{
    void Submit()
    {
        if (!((string.IsNullOrEmpty(accountTitle) || string.IsNullOrWhiteSpace(accountTitle)) || (string.IsNullOrEmpty(phoneNumber) || string.IsNullOrWhiteSpace(phoneNumber))))
        {
            LedgerAccountService.AddNewAccount(accountTitle, LedgerAccountService.NewAccountCode, category, phoneNumber);
        }
    }
    void Reset()
    {
        LedgerAccountService.LoadNewCode();
        accountTitle = phoneNumber = string.Empty;
        isOnApp = false;
    }
    void OnSuccessfulSubmit(object sender, SuccessfullOperationEventArgs eventArgs)
    {
        JSRuntime.InvokeVoidAsync("showSuccessMessage", "", eventArgs.Message);
        Reset();
    }
    void OnErrorSubmit(object sender, ErrorOperationEventArgs eventArgs)
    {
        JSRuntime.InvokeVoidAsync("showErrorMessage", "", eventArgs.Message);
    }
    void UpdateUI()
    {
        StateHasChanged();
    }
    void OnValueChange(object sender, OnUpdateEventArgs eventArgs)
    {
        UpdateUI();
    }
    bool GetFormValidation()
    {
        var isAccountNameValid = !(string.IsNullOrEmpty(accountTitle) || string.IsNullOrWhiteSpace(accountTitle));
        var isPhoneNumberValid = !((string.IsNullOrEmpty(phoneNumber) || string.IsNullOrWhiteSpace(phoneNumber)) && isOnApp);
        return isAccountNameValid && isPhoneNumberValid;
    }
}
